//
//  ViewController.m
//  ProjectEuler
//
//  Created by Nina on 04/03/15.
//  Copyright (c) 2015 Learn. All rights reserved.
//

#import "ViewController.h"
#import "NSArray+RangeArray.h"

@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib
    [self.view setBackgroundColor:[UIColor whiteColor]];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [self smallestDivider];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Problem #1
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
- (void)getTotalOfNumbersDividibleBy3n5 {
    
    NSArray * numbers = [NSArray arrayWithNumbersInRange:NSMakeRange(0, 999)];
    int total = 0;
    for( NSNumber * number in numbers ){
        int no = [number unsignedIntValue];
        if ((no % 3 == 0) || (no % 5 == 0)) {
            total += no;
        }
    }
    NSLog(@"%i",total);
}

#pragma mark - Problem #2
/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/
- (void)fibonacciAdditionOfEvenValued {//4613732
    
    int fib1 = 1;
    int fib2 = 1;
    int result = 0;
    int summed = 0;
    
    while (result < 4000000) {
        if ((result % 2) == 0) {
            summed += result;
        }
        
        result = fib1 + fib2;
        fib2 = fib1;
        fib1 = result;
    }
    NSLog(@"summed %i", summed);
}

#pragma mark - Problem #3
/* The prime factors of 13195 are 5, 7, 13 and 29.
 What is the largest prime factor of the number 600851475143 ?*/
- (void)primeNumber {//6857

    int result;
    long input = 600851475143;
    
    for (result = 2; result < input; result ++) {
        if (input % result == 0) { //if the value is dividable by result, divide it to continue
            input /= result; //Neglect the divided value
            result --;
        }
    }
    NSLog(@"result %i", result);
}

#pragma mark - Problem #5
/*2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?*/
- (void)smallestDivider {//232792560
    
    NSArray * numbers   =   [NSArray arrayWithNumbersInRange:NSMakeRange(1, 19)];
    NSNumber *sum       =   [numbers valueForKeyPath:@"@sum.self"];
    double maxLimit     =   pow([sum doubleValue], 20.0);
    
    for (int limit = 20; limit <= maxLimit; limit ++) {
        int modulo = 0;
        for (NSNumber *divider in numbers) {
            modulo  +=  limit % [divider intValue];
        }
        if (modulo == 0) {
            NSLog(@"Result %i", limit);
            break;
        }
    }
}

#pragma mark - Problem #6
/* The sum of the squares of the first ten natural numbers is,
 12 + 22 + ... + 102 = 385
 The square of the sum of the first ten natural numbers is,
 (1 + 2 + ... + 10)2 = 552 = 3025
 Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 âˆ’ 385 = 2640.
 Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/
- (void)squareDifference {//25164150

    NSArray * numbers   =   [NSArray arrayWithNumbersInRange:NSMakeRange(1, 99)];
    NSNumber *sum       =   [numbers valueForKeyPath:@"@sum.self"];
    double sumSquare    =   pow([sum doubleValue], 2.0);
    
    NSArray *squaredNumbers =   [NSArray arrayWithSquaredNumbersInRange:NSMakeRange(1, 99)];
    NSNumber    *squaredSum =   [squaredNumbers valueForKeyPath:@"@sum.self"];
    
    double difference  =   sumSquare - [squaredSum doubleValue];
    NSLog(@"difference %.0f", difference);
}

@end
